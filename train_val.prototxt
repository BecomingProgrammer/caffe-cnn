name: "EmbedNet"
layers {
  name: "data"
  type: HDF5_DATA
  top: "data"
  top: "label"
  hdf5_data_param {
    source: "data/train.txt"
    batch_size: 100
  }
  include: { phase: TRAIN }
}
layers {
  name: "data"
  type: HDF5_DATA
  top: "data"
  top: "label"
  hdf5_data_param {
    source: "data/valid.txt"
    batch_size: 100
  }
  include: { phase: TEST }
}
layers {
  name: "conv1"
  type: CONVOLUTION
  bottom: "data"
  top: "conv1"
  blobs_lr: 1          # learning rate multiplier for the filters
  blobs_lr: 2          # learning rate multiplier for the biases
  weight_decay: 1      # weight decay multiplier for the filters
  weight_decay: 0      # weight decay multiplier for the biases
  convolution_param {
	num_output: 100     
    kernel_h: 1
	kernel_w: 2
	stride_h: 1
	stride_w: 1
	pad_h: 0
	pad_w: 1
	weight_filler {
	  type: "gaussian" # initialize the filters from a Gaussian
      std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
	bias_filler {
      type: "constant" # initialize the biases to zero (0)
      value: 0
    }
  }
}
layers{
  name: "relu1"
  type: RELU
  bottom: "conv1"
  top: "conv1"
}
layers{
  name: "pool1"
  type: POOLING
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
	kernel_h: 1
	kernel_w: 170
	stride_h: 1
	stride_w: 2      # step two pixels (in the bottom blob) between pooling regions
  }
}
#layers {
#  name: "norm1"
#  type: LRN
#  bottom: "pool1"
#  top: "norm1"
#  lrn_param{
#    local_size: 5
#    alpha: 0.0001
#    beta: 0.75
#  }
#}
layers {
  name: "fc1"
  type: INNER_PRODUCT
  bottom: "pool1"
  top: "fc1"
  blobs_lr: 1          # learning rate multiplier for the filters
  blobs_lr: 2          # learning rate multiplier for the biases
  weight_decay: 1      # weight decay multiplier for the filters
  weight_decay: 0      # weight decay multiplier for the biases
  inner_product_param {
    num_output: 128
    weight_filler {
      type: "gaussian"
      std: 0.01
	}
	bias_filler {
	  type: "constant"
      value: 0
	}
  }
}
layers{
  name: "relu1"
  type: RELU
  bottom: "fc1"
  top: "fc1"
}
layers {
  name: "drop1"
  type: DROPOUT
  bottom: "fc1"
  top: "fc1"
  dropout_param{
    dropout_ratio: 0.5
  }
}

layers {
  name: "fc2"
  type: INNER_PRODUCT
  bottom: "fc1"
  top: "fc2"
  blobs_lr: 1          # learning rate multiplier for the filters
  blobs_lr: 2          # learning rate multiplier for the biases
  weight_decay: 1      # weight decay multiplier for the filters
  weight_decay: 0      # weight decay multiplier for the biases
  inner_product_param {
    num_output: 8
    weight_filler {
      type: "gaussian"
      std: 0.01
	}
	bias_filler {
	  type: "constant"
      value: 0
	}
  }
}

layers {
  name: "loss6"
  type: SOFTMAX_LOSS
  bottom: "fc2"
  bottom: "label"
  top: "loss"
}
layers {
  name: "accuracy"
  type: ACCURACY
  bottom: "fc2"
  bottom: "label"
  top: "accuracy"
  include: { phase: TEST }
}
